
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Get environment variables with fallbacks
// For production, set these in your hosting platform's environment variables
// For local development, you can create a .env file with these values
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.warn(
    'Supabase URL or key not found in environment variables. ' +
    'Please set VITE_SUPABASE_URL and VITE_SUPABASE_PUBLISHABLE_KEY in your environment.'
  );
}

// Production-ready Supabase client configuration
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
    },
    // Add security headers and proper configuration
    global: {
      headers: {
        'X-Client-Info': 'invoicesflow-web@1.0.0',
      },
    },
    // Enable real-time with proper authentication
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
  }
);

// Security: Log critical auth events for audit trail
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_IN' && session?.user) {
    // Log successful authentication
    supabase.rpc('log_security_event', {
      p_action: 'user_signed_in',
      p_resource_type: 'authentication',
      p_details: { 
        user_id: session.user.id,
        provider: session.user.app_metadata?.provider || 'email'
      }
    }).match((result) => {
      if (result.error) {
        console.error('Failed to log sign in event:', result.error);
      }
    });
  } else if (event === 'SIGNED_OUT') {
    // Log sign out
    supabase.rpc('log_security_event', {
      p_action: 'user_signed_out',
      p_resource_type: 'authentication'
    }).match((result) => {
      if (result.error) {
        console.error('Failed to log sign out event:', result.error);
      }
    });
  } else if (event === 'TOKEN_REFRESHED') {
    // Log token refresh for security monitoring
    supabase.rpc('log_security_event', {
      p_action: 'token_refreshed',
      p_resource_type: 'authentication'
    }).match((result) => {
      if (result.error) {
        console.error('Failed to log token refresh event:', result.error);
      }
    });
  }
});
